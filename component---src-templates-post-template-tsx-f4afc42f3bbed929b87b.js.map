{"version":3,"sources":["webpack:///./src/components/Utterances.tsx","webpack:///./src/templates/PostTemplate.tsx"],"names":["utterancesConfig","async","crossorigin","label","repo","src","theme","UtterancesContainer","styled","div","Utterances","elementRef","React","createRef","useEffect","utterances","document","createElement","Object","keys","forEach","key","setAttribute","current","appendChild","ref","Cover","children","CoverContainer","CoverContent","Post","PostDate","span","PostTitle","h1","PostArticle","PostTemplate","memo","pageContext","cover","date","html","title","Layout","dangerouslySetInnerHTML","__html","displayName"],"mappings":"qJAGMA,G,wCAAmB,CACvBC,OAAO,EACPC,YAAa,YACb,aAAc,WACdC,MAAO,YACPC,KAAM,8BACNC,IAAK,gCACLC,MAAO,iBAGHC,EAAsBC,IAAOC,IAAV,sFAAGD,CAAH,gKA8BVE,EAhBI,WACjB,IAAMC,EAAaC,IAAMC,YAYzB,OAVAC,qBAAU,WACR,IAAMC,EAAaC,SAASC,cAAc,UAE1CC,OAAOC,KAAKnB,GAAkBoB,SAAQ,SAACC,GACrCN,EAAWO,aAAaD,EAAKrB,EAAiBqB,OAGhDV,EAAWY,QAAQC,YAAYT,MAG1B,kBAACR,EAAD,CAAqBkB,IAAKd,KCpB7Be,EAAQ,SAAC,GAAmC,IAAjCC,EAAiC,EAAjCA,SAAUtB,EAAuB,EAAvBA,IACnBuB,EAAiBpB,IAAOC,IAAV,mFAAGD,CAAH,8OAWQH,GAQtBwB,EAAerB,IAAOC,IAAV,iFAAGD,CAAH,wIAclB,OACE,kBAACoB,EAAD,KACE,kBAACC,EAAD,KACEF,KAMFG,EAAOtB,IAAOC,IAAV,yEAAGD,CAAH,mIAaJuB,EAAWvB,IAAOwB,KAAV,6EAAGxB,CAAH,gFASRyB,EAAYzB,IAAO0B,GAAV,8EAAG1B,CAAH,sNAiBT2B,EAAc3B,IAAOC,IAAV,gFAAGD,CAAH,mUA0CX4B,EAA6CxB,IAAMyB,MAAK,YAAqB,IAAlBC,EAAkB,EAAlBA,YACvDC,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,KAAMC,EAAgBH,EAAhBG,KAAMC,EAAUJ,EAAVI,MAE3B,OACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,CAAOtC,IAAKkC,GACV,kBAACR,EAAD,KAAWS,GACX,kBAACP,EAAD,KAAYS,IAEd,kBAACZ,EAAD,KACE,kBAACK,EAAD,CAAaS,wBAAyB,CAAEC,OAAQJ,MAElD,kBAAC,EAAD,UAKNL,EAAaU,YAAc,eAEZV","file":"component---src-templates-post-template-tsx-f4afc42f3bbed929b87b.js","sourcesContent":["import React, { useEffect } from 'react';\nimport styled from 'styled-components';\n\nconst utterancesConfig = {\n  async: true,\n  crossorigin: 'anonymous',\n  'issue-term': 'pathname',\n  label: 'ðŸ’¬comment',\n  repo: 'junhoyeo/junhoyeo.github.io',\n  src: 'https://utteranc.es/client.js',\n  theme: 'github-light',\n};\n\nconst UtterancesContainer = styled.div`\n  div.utterances {\n    margin-top: 0.5rem;\n    padding-top: 1rem;\n    border-top: 1px solid #ced4da;\n    max-width: 80%;\n    margin-bottom: 2rem;\n\n    @media (max-width: 1000px) {\n      max-width: 90%;\n    }\n  }\n`;\n\nconst Utterances = () => {\n  const elementRef = React.createRef<HTMLDivElement>();\n\n  useEffect(() => {\n    const utterances = document.createElement('script');\n\n    Object.keys(utterancesConfig).forEach((key: string) => {\n      utterances.setAttribute(key, utterancesConfig[key]);\n    });\n\n    elementRef.current.appendChild(utterances);\n  });\n\n  return <UtterancesContainer ref={elementRef} />;\n};\n\nexport default Utterances;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport Layout from '../components/Layout';\nimport Utterances from '../components/Utterances';\n\ninterface IPostTemplateProps {\n  pageContext: {\n    cover: string;\n    date: string;\n    html: string;\n    title: string;\n  };\n}\n\ninterface ICoverProps {\n  children: React.ReactElement | React.ReactElement[];\n  src: string;\n}\n\nconst Cover = ({ children, src }: ICoverProps) => {\n  const CoverContainer = styled.div`\n    height: 360px;\n    position: relative;\n\n    &::before {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background-image: url(${src});\n      background-repeat: no-repeat;\n      background-position: center;\n      background-size: cover;\n      filter: brightness(0.8);\n    }\n  `;\n\n  const CoverContent = styled.div`\n    position: absolute;\n    margin: 1rem 3.5rem;\n    bottom: 0;\n\n    @media (max-width: 1000px) {\n      margin: 1rem 3rem;\n    }\n\n    @media (max-width: 500px) {\n      margin: 1.5rem;\n    }\n  `;\n\n  return (\n    <CoverContainer>\n      <CoverContent>\n      { children }\n      </CoverContent>\n    </CoverContainer>\n  );\n};\n\nconst Post = styled.div`\n  padding: 2rem 3.5rem;\n  padding-top: 1.5rem;\n\n  @media (max-width: 1000px) {\n    padding: 2rem 3rem;\n  }\n\n  @media (max-width: 500px) {\n    padding: 1.5rem;\n  }\n`;\n\nconst PostDate = styled.span`\n  font-size: 1.5rem;\n  color: #f1f3f5;\n\n  @media (max-width: 500px) {\n    font-size: 1.3rem;\n  }\n`;\n\nconst PostTitle = styled.h1`\n  margin: 0;\n  font-weight: 800;\n  font-size: 3.2rem;\n  margin-bottom: 1.5rem;\n  width: 100%;\n  word-break: break-word;\n  line-height: 1.3;\n  color: white;\n  word-break: keep-all;\n\n  @media (max-width: 500px) {\n    font-size: 2.3rem;\n    margin-bottom: 0.5rem;\n  }\n`;\n\nconst PostArticle = styled.div`\n  h1, h2, h3, h4, h5, h6 {\n    margin: 0.5rem 0;\n  }\n\n  h1 {\n    font-size: 1.5rem;\n  }\n\n  h2 {\n    font-size: 1.4rem;\n  }\n\n  a {\n    color: #4263eb;\n\n    &:hover,\n    &:active {\n      text-decoration: underline;\n    }\n  }\n\n  p {\n    line-height: 1.5;\n    font-size: 1rem;\n    margin: 0.3rem 0;\n  }\n\n  blockquote {\n    margin: 0;\n    padding-left: 0.8rem;\n    border-left: 0.25em solid #ced4da;\n    color: #868e96;\n  }\n\n  img {\n    width: 100%;\n    margin: auto;\n    display: flex;\n  }\n`;\n\nconst PostTemplate: React.FC<IPostTemplateProps> = React.memo(({ pageContext }) => {\n  const { cover, date, html, title } = pageContext;\n\n  return (\n    <Layout>\n      <Cover src={cover}>\n        <PostDate>{date}</PostDate>\n        <PostTitle>{title}</PostTitle>\n      </Cover>\n      <Post>\n        <PostArticle dangerouslySetInnerHTML={{ __html: html }} />\n      </Post>\n      <Utterances />\n    </Layout>\n  );\n});\n\nPostTemplate.displayName = 'PostTemplate';\n\nexport default PostTemplate;\n"],"sourceRoot":""}